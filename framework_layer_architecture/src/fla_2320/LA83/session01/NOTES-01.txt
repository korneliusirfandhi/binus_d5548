Single Responsibility Principle (SRP)
- One class should have one and only one responsibility

Open/Closed Principle (OCP)
- Class should be open for extension, but closed for modification
- A software artifact should be open for extension but closed for modification.

Liskov Substitution Principle (LSP)
- Client dependencies can substituted with subclasses without the client knowing about the change
- The LSP says that you should be able to substitute a parent (or base) type with a subtype

Interface Segregation Principle (ISP)
- Client class that implement interface should not be forced to depend on interface member functions
- The idea is that a client should not depend on a method that it does not use

Dependency Inversion Principle (DIP)
- Depend on abstraction, not concretion

The DIP covers two important things:
- A high-level concrete class should not depend on a low-level concrete class. Instead, both should depend on abstractions.
- Abstractions should not depend upon details. Instead, the details should depend upon abstractions.

Source Code :
https://github.com/Apress/Sarcar_JavaDesignPattersn3